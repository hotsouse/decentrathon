import os
import json
import tempfile
import io
import re
import warnings
import pandas as pd
from PIL import Image, ImageEnhance
import fitz  # PyMuPDF
import streamlit as st
from dotenv import load_dotenv

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(
    page_title="Document Intelligence System", 
    layout="wide",
    initial_sidebar_state="expanded"
)
st.title("üìÑ Advanced Document Processing System")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini AI
GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_easyocr():
    """–ó–∞–≥—Ä—É–∑–∫–∞ EasyOCR —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        import easyocr
        st.sidebar.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ OCR –º–æ–¥–µ–ª–∏...")
        reader = easyocr.Reader(['en', 'ru'], gpu=False)
        st.sidebar.success("‚úÖ OCR –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        return reader
    except Exception as e:
        st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ OCR: {e}")
        return None

@st.cache_resource
def load_gemini_model(api_key):
    """–ó–∞–≥—Ä—É–∑–∫–∞ Gemini –º–æ–¥–µ–ª–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if not api_key or api_key == "YOUR_GEMINI_API_KEY":
        return None
    try:
        import google.generativeai as genai
        genai.configure(api_key=api_key)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        available_models = genai.list_models()
        model_names = [model.name for model in available_models]
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å
        gemini_model_name = None
        preferred_models = [
            "models/gemini-1.5-pro",
            "models/gemini-1.0-pro",
            "models/gemini-pro"
        ]
        
        for model in preferred_models:
            if model in model_names:
                gemini_model_name = model
                break
        
        if gemini_model_name:
            st.sidebar.success(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {gemini_model_name}")
            return genai.GenerativeModel(gemini_model_name)
        else:
            st.sidebar.warning("‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini: " + ", ".join(model_names))
            return None
            
    except Exception as e:
        st.sidebar.warning(f"‚ö†Ô∏è Gemini –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return None

class DocumentProcessor:
    def __init__(self, ocr_reader, gemini_model):
        self.ocr_reader = ocr_reader
        self.gemini_model = gemini_model
    
    def preprocess_image(self, image):
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –∏ —Ä–µ–∑–∫–æ—Å—Ç–∏
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(1.8)
        
        enhancer = ImageEnhance.Sharpness(image)
        image = enhancer.enhance(1.8)
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        if min(image.size) < 1000:
            scale = 1500 / min(image.size)
            new_size = (int(image.size[0] * scale), int(image.size[1] * scale))
            image = image.resize(new_size, Image.LANCZOS)
        
        return image
    
    def extract_text_easyocr(self, image):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é EasyOCR"""
        try:
            image_np = np.array(image)
            
            # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è OCR
            if max(image_np.shape) > 2000:
                scale = 2000 / max(image_np.shape)
                new_size = (int(image_np.shape[1] * scale), int(image_np.shape[0] * scale))
                image_np = np.array(image.resize(new_size, Image.LANCZOS))
            
            results = self.ocr_reader.readtext(
                image_np, 
                detail=0,
                paragraph=True,
                contrast_ths=0.2,
                adjust_contrast=0.6
            )
            
            return "\n".join(results)
        except Exception as e:
            st.warning(f"OCR error: {e}")
            return ""
    
    def enhance_text_with_gemini(self, text):
        """–£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini AI"""
        if not self.gemini_model or not text.strip():
            return text
            
        try:
            prompt = f"""
            –ò—Å–ø—Ä–∞–≤—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ —É–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, 
            —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
            
            –¢–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
            {text[:2000]}
            """
            
            response = self.gemini_model.generate_content(prompt)
            return response.text
        except Exception as e:
            st.warning(f"Gemini enhancement error: {e}")
            return text
    
    def extract_structured_data_with_gemini(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Gemini AI"""
        if not self.gemini_model:
            return self.extract_structured_data_basic(text)
            
        try:
            prompt = f"""
            –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
            –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å—Ç—Ä–æ–≥–æ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
            
            {{
                "document_type": "—Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (invoice, contract, receipt, unknown)",
                "sender": "–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å/–ø—Ä–æ–¥–∞–≤–µ—Ü",
                "receiver": "–ø–æ–ª—É—á–∞—Ç–µ–ª—å/–ø–æ–∫—É–ø–∞—Ç–µ–ª—å", 
                "date": "–¥–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                "amount": "—Å—É–º–º–∞/—Å—Ç–æ–∏–º–æ—Å—Ç—å",
                "description": "–æ–ø–∏—Å–∞–Ω–∏–µ/–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞",
                "contract_number": "–Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å",
                "currency": "–≤–∞–ª—é—Ç–∞ –µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
            }}
            
            –ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –ø–æ–ª–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π "unknown".
            –í–∞–∂–Ω–æ: –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
            
            –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
            {text[:2500]}
            """
            
            response = self.gemini_model.generate_content(prompt)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            response_text = response.text.strip()
            
            # –£–±–∏—Ä–∞–µ–º markdown –∫–æ–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            response_text = response_text.replace('```json', '').replace('```', '').strip()
            
            json_start = response_text.find('{')
            json_end = response_text.rfind('}') + 1
            
            if json_start != -1 and json_end != -1:
                json_str = response_text[json_start:json_end]
                try:
                    return json.loads(json_str)
                except json.JSONDecodeError as je:
                    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç Gemini: {je}")
                    # –ü—Ä–æ–±—É–µ–º –ø–æ—á–∏—Å—Ç–∏—Ç—å JSON
                    try:
                        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
                        json_str_clean = re.sub(r'[^\x00-\x7F]+', '', json_str)
                        return json.loads(json_str_clean)
                    except:
                        pass
            
            return self.extract_structured_data_basic(text)
            
        except Exception as e:
            st.warning(f"Gemini structuring error: {e}")
            return self.extract_structured_data_basic(text)
    
    def extract_structured_data_basic(self, text):
        """–ë–∞–∑–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            structured_data = {
                "document_type": self._detect_document_type(text),
                "sender": self._extract_field(text, ['from:', '–æ—Ç:', 'sender:', '–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:', '–ø—Ä–æ–¥–∞–≤–µ—Ü:']),
                "receiver": self._extract_field(text, ['to:', '–∫–æ–º—É:', 'receiver:', '–ø–æ–ª—É—á–∞—Ç–µ–ª—å:', '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å:']),
                "date": self._extract_date(text),
                "amount": self._extract_amount(text),
                "description": self._extract_description(text),
                "contract_number": self._extract_contract_number(text),
                "currency": self._extract_currency(text),
                "raw_text_preview": text[:400] + "..." if len(text) > 400 else text
            }
            
            return structured_data
            
        except Exception as e:
            return {"error": str(e), "raw_text": text}
    
    def _extract_field(self, text, keywords):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        lines = text.split('\n')
        for line in lines:
            line_lower = line.lower()
            for keyword in keywords:
                if keyword in line_lower:
                    return line.replace(keyword, '').replace(keyword.upper(), '').strip()
        return "unknown"
    
    def _detect_document_type(self, text):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        text_lower = text.lower()
        if any(word in text_lower for word in ['invoice', '—Å—á–µ—Ç', '—Å—á—ë—Ç', '–∏–Ω–≤–æ–π—Å']):
            return "invoice"
        elif any(word in text_lower for word in ['contract', '–¥–æ–≥–æ–≤–æ—Ä', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç']):
            return "contract"
        elif any(word in text_lower for word in ['receipt', '—á–µ–∫', '–∫–≤–∏—Ç–∞–Ω—Ü–∏—è']):
            return "receipt"
        else:
            return "unknown"
    
    def _extract_date(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã"""
        date_patterns = [
            r'\d{2}/\d{2}/\d{4}',
            r'\d{2}-\d{2}-\d{4}',
            r'\d{2}\.\d{2}\.\d{4}',
            r'\d{4}-\d{2}-\d{2}'
        ]
        
        for pattern in date_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                return matches[0]
        return "unknown"
    
    def _extract_amount(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–º–º—ã"""
        amount_patterns = [
            r'\$\s*\d+[,\d]*\.?\d*',
            r'\d+[,\d]*\.?\d*\s*USD',
            r'\d+[,\d]*\.?\d*\s*EUR',
            r'\d+[,\d]*\.?\d*\s*RUB',
            r'\d+[,\d]*\.?\d*\s*‚ÇΩ',
            r'—Å—É–º–º–∞[:\s]*(\d+[,\d]*\.?\d*)',
            r'amount[:\s]*(\d+[,\d]*\.?\d*)',
            r'total[:\s]*(\d+[,\d]*\.?\d*)'
        ]
        
        for pattern in amount_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                return matches[0] if isinstance(matches[0], str) else str(matches[0])
        return "unknown"
    
    def _extract_currency(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
        currency_patterns = [
            r'\$', r'USD', r'EUR', r'RUB', r'‚ÇΩ', r'—Ç–µ–Ω–≥–µ', r'KZT'
        ]
        
        for pattern in currency_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                return pattern.replace('\\', '')
        return "unknown"
    
    def _extract_description(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        lines = text.split('\n')
        for i, line in enumerate(lines):
            if any(word in line.lower() for word in ['description', '–æ–ø–∏—Å–∞–Ω–∏–µ', '–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ']):
                return line
        return lines[2] if len(lines) > 2 else "unknown"
    
    def _extract_contract_number(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–∞"""
        patterns = [
            r'‚Ññ\s*[A-Za-z0-9-]+',
            r'No\.?\s*[A-Za-z0-9-]+',
            r'contract no\.?\s*[A-Za-z0-9-]+',
            r'–¥–æ–≥–æ–≤–æ—Ä ‚Ññ\s*[A-Za-z0-9-]+'
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                return matches[0]
        return "unknown"

def process_pdf_file(uploaded_file):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞"""
    try:
        pdf_data = uploaded_file.getvalue()
        doc = fitz.open(stream=pdf_data, filetype="pdf")
        page = doc.load_page(0)
        
        zoom = 1.5
        mat = fitz.Matrix(zoom, zoom)
        pix = page.get_pixmap(matrix=mat)
        
        img_data = pix.tobytes("ppm")
        image = Image.open(io.BytesIO(img_data))
        doc.close()
        
        return image
        
    except Exception as e:
        raise e

def process_excel_file(uploaded_file):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞"""
    try:
        if uploaded_file.name.endswith('.xlsx'):
            df = pd.read_excel(uploaded_file, engine='openpyxl', nrows=100)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        elif uploaded_file.name.endswith('.xls'):
            df = pd.read_excel(uploaded_file, nrows=100)
        else:  # CSV
            df = pd.read_csv(uploaded_file, nrows=100)
        
        text = "Excel Document Data:\n\n"
        for col in df.columns:
            sample_values = df[col].dropna().head(5).astype(str).tolist()
            text += f"{col}: {', '.join(sample_values)}\n"
        
        return text, df
        
    except Exception as e:
        raise e

def process_text_file(uploaded_file):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        content = uploaded_file.getvalue().decode('utf-8')
        return content[:5000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    except:
        try:
            content = uploaded_file.getvalue().decode('latin-1')
            return content[:5000]
        except:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"

def process_word_file(uploaded_file):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Word –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        from docx import Document
        doc = Document(io.BytesIO(uploaded_file.getvalue()))
        text = "\n".join([paragraph.text for paragraph in doc.paragraphs[:50]])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
        return text
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"

def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    gemini_key = st.sidebar.text_input(
        "Gemini API Key", 
        value=GEMINI_API_KEY if GEMINI_API_KEY and GEMINI_API_KEY != "YOUR_GEMINI_API_KEY" else "",
        type="password", 
        help="–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://aistudio.google.com/"
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
    ocr_reader = load_easyocr()
    gemini_model = load_gemini_model(gemini_key)
    
    if not ocr_reader:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å OCR –º–æ–¥–µ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É EasyOCR.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    if 'processor' not in st.session_state or st.session_state.get('gemini_key') != gemini_key:
        processor = DocumentProcessor(ocr_reader, gemini_model)
        st.session_state.processor = processor
        st.session_state.gemini_key = gemini_key
    
    processor = st.session_state.processor
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    st.sidebar.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    uploaded_file = st.sidebar.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª",
        type=[
            'png', 'jpg', 'jpeg', 'pdf', 'tiff', 'bmp', 'gif',  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            'xlsx', 'xls', 'csv',  # Excel
            'txt', 'doc', 'docx', 'rtf',  # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        ],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤"
    )
    
    if uploaded_file is not None:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
            st.info(f"üìù –¢–∏–ø —Ñ–∞–π–ª–∞: {uploaded_file.type}")
            st.info(f"üìä –†–∞–∑–º–µ—Ä: {uploaded_file.size} –±–∞–π—Ç")
            
            try:
                file_content = None
                additional_data = None
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
                if uploaded_file.type.startswith('image/'):
                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image = Image.open(uploaded_file)
                    st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", width=400)
                    file_content = image
                    
                elif uploaded_file.type == 'application/pdf':
                    # PDF —Ñ–∞–π–ª—ã
                    image = process_pdf_file(uploaded_file)
                    st.image(image, caption="–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ PDF", width=400)
                    file_content = image
                    
                elif uploaded_file.type in ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 
                                          'application/vnd.ms-excel', 'text/csv']:
                    # Excel/CSV —Ñ–∞–π–ª—ã
                    text, df = process_excel_file(uploaded_file)
                    st.dataframe(df.head(), use_container_width=True)
                    file_content = text
                    additional_data = df
                    
                elif uploaded_file.type in ['text/plain', 'application/rtf']:
                    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                    text = process_text_file(uploaded_file)
                    st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:", text, height=200, label_visibility="visible")
                    file_content = text
                    
                elif uploaded_file.type in ['application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                                          'application/msword']:
                    # Word –¥–æ–∫—É–º–µ–Ω—Ç—ã
                    text = process_word_file(uploaded_file)
                    st.text_area("–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:", text, height=200, label_visibility="visible")
                    file_content = text
                    
                else:
                    st.warning("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    file_content = None
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                if file_content and st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", type="primary", use_container_width=True):
                    with st.spinner("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞..."):
                        if isinstance(file_content, Image.Image):
                            # OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                            extracted_text = processor.extract_text_easyocr(file_content)
                            
                            # –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å Gemini
                            if processor.gemini_model:
                                with st.spinner("ü§ñ –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å AI..."):
                                    enhanced_text = processor.enhance_text_with_gemini(extracted_text)
                            else:
                                enhanced_text = extracted_text
                            
                            # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                            with st.spinner("üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."):
                                if processor.gemini_model:
                                    structured_data = processor.extract_structured_data_with_gemini(enhanced_text)
                                else:
                                    structured_data = processor.extract_structured_data_basic(enhanced_text)
                            
                            with col2:
                                st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                                with st.expander("üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"):
                                    st.text_area("–¢–µ–∫—Å—Ç:", extracted_text, height=200, label_visibility="visible")
                                
                                if processor.gemini_model:
                                    with st.expander("‚ú® –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è AI"):
                                        st.text_area("–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", enhanced_text, height=200, label_visibility="visible")
                            
                        else:
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                            if processor.gemini_model:
                                with st.spinner("ü§ñ –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å AI..."):
                                    enhanced_text = processor.enhance_text_with_gemini(file_content)
                                with st.spinner("üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."):
                                    structured_data = processor.extract_structured_data_with_gemini(enhanced_text)
                            else:
                                with st.spinner("üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."):
                                    structured_data = processor.extract_structured_data_basic(file_content)
                            
                            with col2:
                                st.subheader("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                                st.success("–¢–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                        
                        # –ü–æ–∫–∞–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        st.subheader("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                        st.json(structured_data)
                        
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        json_str = json.dumps(structured_data, ensure_ascii=False, indent=2)
                        st.download_button(
                            label="üíæ –°–∫–∞—á–∞—Ç—å JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                            data=json_str,
                            file_name="processed_document.json",
                            mime="application/json",
                            use_container_width=True
                        )
                        
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    st.sidebar.info("""
    **üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
    - üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: PNG, JPG, JPEG, TIFF, BMP, GIF
    - üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: PDF, TXT, DOC, DOCX, RTF
    - üìä –¢–∞–±–ª–∏—Ü—ã: XLSX, XLS, CSV
    
    **üîë –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Gemini AI:**
    1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://aistudio.google.com/
    2. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤ –ø–æ–ª–µ –≤—ã—à–µ
    3. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º!
    """)

if __name__ == "__main__":
    import numpy as np
    main()