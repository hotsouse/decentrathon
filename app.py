import os
import json
import tempfile
import io
import re
import warnings
import requests
warnings.filterwarnings('ignore')

import streamlit as st
import numpy as np
from PIL import Image, ImageEnhance
import torch
import fitz  # PyMuPDF
import google.generativeai as genai
from dotenv import load_dotenv
import os


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(page_title="Document Intelligence System", layout="wide")
st.title("üìÑ Advanced Document Processing System")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini AI
GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á

class DocumentProcessor:
    def __init__(self):
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        st.write(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        self._initialize_models()
        
    def _initialize_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini AI
            st.write("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini AI...")
            if GEMINI_API_KEY != "YOUR_GEMINI_API_KEY":
                genai.configure(api_key=GEMINI_API_KEY)
                self.gemini_model = genai.GenerativeModel('gemini-pro')
            else:
                st.warning("Gemini API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ.")
                self.gemini_model = None
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EasyOCR
            st.write("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR...")
            import easyocr
            
            self.easy_reader = easyocr.Reader(
                ['en', 'ru'], 
                gpu=self.device == "cuda"
            )
            
            st.success("–ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            raise e
    
    def preprocess_image(self, image):
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –∏ —Ä–µ–∑–∫–æ—Å—Ç–∏
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(2.0)
        
        enhancer = ImageEnhance.Sharpness(image)
        image = enhancer.enhance(2.0)
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        if min(image.size) < 1200:
            new_size = (image.size[0] * 2, image.size[1] * 2)
            image = image.resize(new_size, Image.LANCZOS)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ grayscale –¥–ª—è –ª—É—á—à–µ–≥–æ OCR
        image_gray = image.convert('L')
        return image_gray
    
    def extract_text_easyocr(self, image):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é EasyOCR"""
        try:
            image_np = np.array(image)
            
            # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è OCR
            if max(image_np.shape) > 2500:
                scale = 2500 / max(image_np.shape)
                new_size = (int(image_np.shape[1] * scale), int(image_np.shape[0] * scale))
                image_np = np.array(image.resize(new_size, Image.LANCZOS))
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            results = self.easy_reader.readtext(
                image_np, 
                detail=0,
                paragraph=True,
                contrast_ths=0.1,
                adjust_contrast=0.7
            )
            
            return "\n".join(results)
        except Exception as e:
            st.warning(f"OCR error: {e}")
            return ""
    
    def enhance_text_with_gemini(self, text):
        """–£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini AI"""
        if not self.gemini_model or not text.strip():
            return text
            
        try:
            prompt = f"""
            –ò—Å–ø—Ä–∞–≤—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ —É–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, 
            —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
            
            –¢–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
            {text}
            """
            
            response = self.gemini_model.generate_content(prompt)
            return response.text
        except Exception as e:
            st.warning(f"Gemini enhancement error: {e}")
            return text
    
    def extract_structured_data_with_gemini(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Gemini AI"""
        if not self.gemini_model:
            return self.extract_structured_data_basic(text)
            
        try:
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
            –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
            
            –ü–æ–ª—è JSON:
            - document_type (—Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: invoice, contract, receipt, unknown)
            - sender (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å/–ø—Ä–æ–¥–∞–≤–µ—Ü)
            - receiver (–ø–æ–ª—É—á–∞—Ç–µ–ª—å/–ø–æ–∫—É–ø–∞—Ç–µ–ª—å)
            - date (–¥–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
            - amount (—Å—É–º–º–∞/—Å—Ç–æ–∏–º–æ—Å—Ç—å)
            - description (–æ–ø–∏—Å–∞–Ω–∏–µ/–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞)
            - contract_number (–Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å)
            - items (—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥, –µ—Å–ª–∏ –µ—Å—Ç—å)
            
            –ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –ø–æ–ª–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π "unknown".
            
            –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:
            {text[:3000]}
            """
            
            response = self.gemini_model.generate_content(prompt)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            response_text = response.text.strip()
            json_start = response_text.find('{')
            json_end = response_text.rfind('}') + 1
            
            if json_start != -1 and json_end != -1:
                json_str = response_text[json_start:json_end]
                try:
                    return json.loads(json_str)
                except json.JSONDecodeError:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç Gemini")
            
            return self.extract_structured_data_basic(text)
            
        except Exception as e:
            st.warning(f"Gemini structuring error: {e}")
            return self.extract_structured_data_basic(text)
    
    def extract_structured_data_basic(self, text):
        """–ë–∞–∑–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            structured_data = {
                "document_type": self._detect_document_type(text),
                "sender": self._extract_field(text, ['from:', '–æ—Ç:', 'sender:', '–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:', '–ø—Ä–æ–¥–∞–≤–µ—Ü:']),
                "receiver": self._extract_field(text, ['to:', '–∫–æ–º—É:', 'receiver:', '–ø–æ–ª—É—á–∞—Ç–µ–ª—å:', '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å:']),
                "date": self._extract_date(text),
                "amount": self._extract_amount(text),
                "description": self._extract_description(text),
                "contract_number": self._extract_contract_number(text),
                "raw_text_preview": text[:500] + "..." if len(text) > 500 else text
            }
            
            return structured_data
            
        except Exception as e:
            st.warning(f"Structuring error: {e}")
            return {"error": str(e), "raw_text": text}
    
    def _extract_field(self, text, keywords):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        lines = text.split('\n')
        for line in lines:
            line_lower = line.lower()
            for keyword in keywords:
                if keyword in line_lower:
                    return line.replace(keyword, '').replace(keyword.upper(), '').strip()
        return "unknown"
    
    def _detect_document_type(self, text):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        text_lower = text.lower()
        if any(word in text_lower for word in ['invoice', '—Å—á–µ—Ç', '—Å—á—ë—Ç', '–∏–Ω–≤–æ–π—Å']):
            return "invoice"
        elif any(word in text_lower for word in ['contract', '–¥–æ–≥–æ–≤–æ—Ä', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç']):
            return "contract"
        elif any(word in text_lower for word in ['receipt', '—á–µ–∫', '–∫–≤–∏—Ç–∞–Ω—Ü–∏—è', 'receipt']):
            return "receipt"
        else:
            return "unknown"
    
    def _extract_date(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã"""
        date_patterns = [
            r'\d{2}/\d{2}/\d{4}',
            r'\d{2}-\d{2}-\d{4}',
            r'\d{2}\.\d{2}\.\d{4}',
            r'\d{4}-\d{2}-\d{2}',
            r'\d{1,2}\s+[–∞-—è]+\s+\d{4}',
            r'\d{1,2}\s+[a-z]+\s+\d{4}'
        ]
        
        for pattern in date_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                return matches[0]
        return "unknown"
    
    def _extract_amount(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–º–º—ã"""
        amount_patterns = [
            r'\$\s*\d+[,\d]*\.?\d*',
            r'\d+[,\d]*\.?\d*\s*USD',
            r'\d+[,\d]*\.?\d*\s*EUR',
            r'\d+[,\d]*\.?\d*\s*RUB',
            r'\d+[,\d]*\.?\d*\s*‚ÇΩ',
            r'\d+[,\d]*\.?\d*\s*—Ç–µ–Ω–≥–µ',
            r'—Å—É–º–º–∞[:\s]*(\d+[,\d]*\.?\d*)',
            r'amount[:\s]*(\d+[,\d]*\.?\d*)',
            r'total[:\s]*(\d+[,\d]*\.?\d*)'
        ]
        
        for pattern in amount_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                return matches[0] if isinstance(matches[0], str) else str(matches[0])
        return "unknown"
    
    def _extract_description(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        lines = text.split('\n')
        for i, line in enumerate(lines):
            if any(word in line.lower() for word in ['description', '–æ–ø–∏—Å–∞–Ω–∏–µ', '–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ', '–ø—Ä–µ–¥–º–µ—Ç']):
                return line
        return lines[2] if len(lines) > 2 else "unknown"
    
    def _extract_contract_number(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–∞"""
        patterns = [
            r'‚Ññ\s*[A-Za-z0-9-]+',
            r'No\.?\s*[A-Za-z0-9-]+',
            r'contract no\.?\s*[A-Za-z0-9-]+',
            r'–¥–æ–≥–æ–≤–æ—Ä ‚Ññ\s*[A-Za-z0-9-]+',
            r'number\s*[A-Za-z0-9-]+'
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                return matches[0]
        return "unknown"
    
    def process_document(self, image):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
        processed_image = self.preprocess_image(image)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        with st.spinner("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞..."):
            extracted_text = self.extract_text_easyocr(processed_image)
        
        # –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å Gemini
        if self.gemini_model:
            with st.spinner("–£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å AI..."):
                enhanced_text = self.enhance_text_with_gemini(extracted_text)
        else:
            enhanced_text = extracted_text
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        with st.spinner("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."):
            if self.gemini_model:
                structured_data = self.extract_structured_data_with_gemini(enhanced_text)
            else:
                structured_data = self.extract_structured_data_basic(enhanced_text)
        
        return {
            "raw_text": extracted_text,
            "enhanced_text": enhanced_text,
            "structured_data": structured_data
        }

def process_pdf_file(uploaded_file):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞"""
    try:
        # –ß–∏—Ç–∞–µ–º PDF –∏–∑ –ø–∞–º—è—Ç–∏
        pdf_data = uploaded_file.getvalue()
        doc = fitz.open(stream=pdf_data, filetype="pdf")
        page = doc.load_page(0)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        zoom = 2.0
        mat = fitz.Matrix(zoom, zoom)
        pix = page.get_pixmap(matrix=mat)
        
        img_data = pix.tobytes("ppm")
        image = Image.open(io.BytesIO(img_data))
        doc.close()
        
        return image
        
    except Exception as e:
        raise e

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API –∫–ª—é—á–∞
    gemini_key = st.sidebar.text_input("Gemini API Key", type="password", 
                                      help="–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://aistudio.google.com/")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    if 'processor' not in st.session_state or st.session_state.get('gemini_key') != gemini_key:
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π..."):
            try:
                global GEMINI_API_KEY
                if gemini_key:
                    GEMINI_API_KEY = gemini_key
                
                st.session_state.processor = DocumentProcessor()
                st.session_state.gemini_key = gemini_key
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: {e}")
                return
    
    processor = st.session_state.processor
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF)",
        type=['png', 'jpg', 'jpeg', 'pdf'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–∫–∞–Ω—ã, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, PDF-—Ñ–∞–π–ª—ã"
    )
    
    if uploaded_file is not None:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
            
            try:
                if uploaded_file.type == "application/pdf":
                    image = process_pdf_file(uploaded_file)
                else:
                    image = Image.open(uploaded_file)
                
                st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", width='stretch')
                
                if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", type="primary"):
                    result = processor.process_document(image)
                    
                    with col2:
                        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                        
                        # –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                        with st.expander("–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"):
                            st.text_area(
                                "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:", 
                                result['raw_text'], 
                                height=200,
                                label_visibility="visible"
                            )
                        
                        # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                        if processor.gemini_model:
                            with st.expander("–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è AI"):
                                st.text_area(
                                    "–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", 
                                    result['enhanced_text'], 
                                    height=200,
                                    label_visibility="visible"
                                )
                        
                        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        st.subheader("–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                        st.json(result['structured_data'])
                        
                        # –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        json_str = json.dumps(result['structured_data'], ensure_ascii=False, indent=2)
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å JSON",
                            data=json_str,
                            file_name="processed_document.json",
                            mime="application/json"
                        )
                        
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

if __name__ == "__main__":
    main()